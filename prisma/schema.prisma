generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

model Category {
  id       String           @id @default(uuid()) @db.Uuid
  name     String
  template CategoryTemplate @default(TEMPLATE_ONE)
  products Product[]
}

model Shopcart {
  id                   String                         @id @default(uuid()) @db.Uuid
  sessionId            String?
  paymentSessionId     String?                        @unique
  isPaid               Boolean                        @default(false)
  applyDiscount        Boolean                        @default(false)
  created_at           DateTime?                      @default(now())
  user                 User?                          @relation(fields: [userId], references: [id])
  userId               String?                        @db.Uuid
  items                ShopcartItem[]
  PaymentShopcart      PaymentShopcart[]
  discountSubscription ShopcartDiscountSubscription[]
}

model ShopcartItem {
  id         String    @id @default(uuid()) @db.Uuid
  productId  String    @db.Uuid
  car        Shopcart  @relation(fields: [carId], references: [id])
  carId      String    @db.Uuid
  product    Product   @relation(fields: [productId], references: [id])
  count      Int
  size       String    @db.VarChar(20)
  created_at DateTime? @default(now())

  @@unique([carId, productId])
}

model ProductType {
  id           String               @id @default(uuid()) @db.Uuid
  name         String?
  created_at   DateTime?            @default(now())
  updated_at   DateTime?            @default(now())
  descriptions ProductDescription[]
}

model HomeInfo {
  id      Int    @id @default(autoincrement())
  mision  String @db.Text
  history String @db.Text
  vision  String @db.Text
}

model HomeProducts {
  id        String  @id @default(uuid()) @db.Uuid
  productId String  @db.Uuid
  products  Product @relation(fields: [productId], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model Order {
  id       String       @id @default(uuid()) @db.Uuid
  userId   String       @db.Uuid
  User     User         @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  state    OrderState
  items    OrderItems[]
  products Product[]
}

model OrderItems {
  id        String  @id @default(uuid()) @db.Uuid
  productId String  @db.Uuid
  quantity  Int
  total     Decimal @db.Decimal(10, 2)
  orderId   String  @db.Uuid
  orders    Order?  @relation(fields: [orderId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  products  Product @relation(fields: [productId], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model Post {
  id         String   @id @default(uuid()) @db.Uuid
  userId     String   @db.Uuid
  title      String
  content    String   @db.Text
  image      String?
  created_at DateTime @default(now())
  createdBy  User     @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model Product {
  id   String @id @default(uuid()) @db.Uuid
  name String

  // Derma o Roller
  description String?

  price      Float
  quantity   Int
  assessment Int      @default(1)
  sizes      String[] @default(["1.0 fl. oz/30 ml"]) @db.VarChar(100)

  // Serum
  keyBenefits String?
  // Derma o Roller: howUse is equal to instructions
  howUse      String?
  ingredients String?
  // Derma o Roller: caution is equal to precaution & possible side effects
  caution     String?

  // Derma o Roller
  weight     String? @db.VarChar(25)
  dimensions String? @db.VarChar(25)

  label ProductLabel @default(NEW)

  created_at DateTime? @default(now())

  category     Category             @relation(fields: [categoryId], references: [id])
  categoryId   String               @db.Uuid
  homeProducts HomeProducts[]
  Orders       Order[]
  images       ProductImages[]
  orderItems   OrderItems[]
  descriptions ProductDescription[]
  carItems     ShopcartItem[]
}

model ProductImages {
  id         String    @id @default(uuid()) @db.Uuid
  productId  String    @db.Uuid
  image      String
  isFirst    Boolean
  created_at DateTime? @default(now())
  product    Product   @relation(fields: [productId], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model ProductDescription {
  id         String      @id @default(uuid()) @db.Uuid
  productId  String      @db.Uuid
  content    String?     @db.Text
  created_at DateTime?   @default(now())
  updated_at DateTime?   @default(now())
  product    Product     @relation(fields: [productId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  type       ProductType @relation(fields: [typeId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  typeId     String      @db.Uuid
}

model Session {
  id        String   @id
  sid       String   @unique
  data      String
  expiresAt DateTime
}

model User {
  id       String     @id @default(uuid()) @db.Uuid
  name     String
  lastname String
  image    String?
  email    String     @unique()
  password String
  type     UserType
  orders   Order[]
  posts    Post[]
  car      Shopcart[]
}

model PaymentShopcart {
  id         String    @id @default(uuid()) @db.Uuid
  name       String
  email      String
  phone      String?
  city       String
  country    String
  line1      String
  line2      String?
  postalCode String?
  state      String
  created_at DateTime? @default(now())
  shopcart   Shopcart  @relation(fields: [shopcartId], references: [id])
  shopcartId String    @db.Uuid
}

model DiscountSubscription {
  id                           String                         @id @default(uuid()) @db.Uuid
  email                        String
  used                         Boolean                        @default(false)
  created_at                   DateTime?                      @default(now())
  ShopcartDiscountSubscription ShopcartDiscountSubscription[]
}

model ShopcartDiscountSubscription {
  id                     String               @id @default(uuid()) @db.Uuid
  created_at             DateTime?            @default(now())
  shopcart               Shopcart             @relation(fields: [shopcartId], references: [id])
  shopcartId             String               @db.Uuid
  discountSubscription   DiscountSubscription @relation(fields: [discountSubscriptionId], references: [id])
  discountSubscriptionId String               @db.Uuid

  @@unique([shopcartId, discountSubscriptionId])
}

enum UserType {
  ADMIN
  CLIENT
}

enum OrderState {
  PENDING
  GENERATED
  PAID
}

enum CategoryTemplate {
  TEMPLATE_ONE
  TEMPLATE_TWO
}

enum ProductLabel {
  SALE
  NEW
  SOLD_OUT
}

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

model Category {
  id       String    @id @default(uuid()) @db.Uuid
  name     String
  products Product[]
}

model Shopcart {
  id        String         @id @default(uuid()) @db.Uuid
  session   Session?       @relation(fields: [sessionId], references: [id])
  sessionId String?        @unique
  user      User?          @relation(fields: [userId], references: [id])
  userId    String?        @unique @db.Uuid
  items     ShopcartItem[]
}

model ShopcartItem {
  id        String   @id @default(uuid()) @db.Uuid
  productId String   @db.Uuid
  car       Shopcart @relation(fields: [carId], references: [id])
  carId     String   @db.Uuid
  product   Product  @relation(fields: [productId], references: [id])
  count     Int

  @@unique([carId, productId])
}

model ProductType {
  id           String               @id @default(uuid()) @db.Uuid
  name         String?
  created_at   DateTime?            @default(now())
  updated_at   DateTime?            @default(now())
  descriptions ProductDescription[]
}

model HomeInfo {
  id      Int    @id @default(autoincrement())
  mision  String @db.Text
  history String @db.Text
  vision  String @db.Text
}

model HomeProducts {
  id        String  @id @default(uuid()) @db.Uuid
  productId String  @db.Uuid
  products  Product @relation(fields: [productId], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model Order {
  id       String       @id @default(uuid()) @db.Uuid
  userId   String       @db.Uuid
  User     User         @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  state    OrderState
  items    OrderItems[]
  products Product[]
}

model OrderItems {
  id        String  @id @default(uuid()) @db.Uuid
  productId String  @db.Uuid
  quantity  Int
  total     Decimal @db.Decimal(10, 2)
  orderId   String  @db.Uuid
  orders    Order?  @relation(fields: [orderId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  products  Product @relation(fields: [productId], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model Post {
  id         String   @id @default(uuid()) @db.Uuid
  userId     String   @db.Uuid
  title      String
  content    String   @db.Text
  image      String
  created_at DateTime
  createdBy  User     @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model Product {
  id           String               @id @default(uuid()) @db.Uuid
  name         String
  description  String
  price        Float
  quantity     Int
  assessment   Int                  @default(1)
  category     Category             @relation(fields: [categoryId], references: [id])
  categoryId   String               @db.Uuid
  homeProducts HomeProducts[]
  Orders       Order[]
  images       ProductImages[]
  orderItems   OrderItems[]
  descriptions ProductDescription[]
  carItems     ShopcartItem[]
}

model ProductImages {
  id        String  @id @default(uuid()) @db.Uuid
  productId String  @db.Uuid
  image     String
  isFirst   Boolean
  products  Product @relation(fields: [productId], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model ProductDescription {
  id         String      @id @default(uuid()) @db.Uuid
  productId  String      @db.Uuid
  content    String?     @db.Text
  created_at DateTime?   @default(now())
  updated_at DateTime?   @default(now())
  products   Product     @relation(fields: [productId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  type       ProductType @relation(fields: [typeId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  typeId     String      @db.Uuid
}

model Session {
  id        String    @id
  sid       String    @unique
  data      String
  carshop   Shopcart?
  expiresAt DateTime
}

model User {
  id       String    @id @default(uuid()) @db.Uuid
  name     String
  lastname String
  image    String?
  email    String    @unique()
  password String
  orders   Order[]
  posts    Post[]
  type     UserType
  car Shopcart?
}

enum UserType {
  ADMIN
  CLIENT
}

enum OrderState {
  PENDING
  GENERATED
  PAID
}

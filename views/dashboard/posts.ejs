<!DOCTYPE html>
<html lang="en">
	<head>
		<%- include('../partials/head.ejs'); %>
	</head>
<body>
  <div class="header">
    <%- include('../partials/header.ejs', { account: user?.name ?? "", car }); %>
    <link href="https://cdn.jsdelivr.net/npm/summernote@0.8.18/dist/summernote.min.css" rel="stylesheet">

  </div>
  <div id="preloader" bis_skin_checked="1" style="display: none;"></div>
  <div class="container mt-5 pt-5">
    <h1>Dashboard</h1>
    <div class="row">
      <div class="col-md-4">
        <div class="card">
          <div class="card-header">
            <h4>Recent Activity</h4>
          </div>
          <div class="card-body">
            <ul class="list-group">
              <li class="list-group-item">
                <a href="/dashboard/products">Products</a>
              </li>
              <li class="list-group-item">
                <a href="/dashboard/categories">Categories</a>
              </li>
              <li class="list-group-item">
                <a href="/dashboard/users">Users</a>
              </li>
              <li class="list-group-item">
                <a href="/dashboard/posts">Posts</a>
              </li>
            </ul>
          </div>
        </div>
      </div>
      <div class="col-md-8">
        <div class="card p-2">
          <form action="/dashboard/posts" method="post" enctype="multipart/form-data">
              <div class="form-group">
                <label for="title">Title:</label>
                <input type="text" class="form-control" id="title" name="title" required>
              </div>

              <div class="form-group">
                <label for="image">Cover image:</label>
                <input type="file" name="image" id="image" required />
              </div>
    
              <div class="form-group">
                <div id="summernote"></div>
              </div>

              <button type="submit" class="btn btn-primary" id="button_submit">Submit</button>
              <button class="btn btn-secondary d-none" id="button_cancel" onclick="cancel()">Cancel</button>
          </form>
        </div>

        <div class="card mt-2">
          <div class="card-header">
            <h4>Posts</h4>
          </div>
          <table class='table table-striped table-bordered table-hover'>
            <thead>
              <tr>
                <th>Title</th>
                <th class="text-center">Cover image</th>
                <th class="text-center">Action</th>
              </tr>
            </thead>
            <% posts.map(post => { %>
              <tr>
                <td id="<%= post.id %>-title"><%= post.title %></td>
                <td class="text-center">
                  <% if (post.image) { %>
                    <img src="<%= post.image %>" alt="<%= post.title %>" height="50px" style="width: 50px;" />
                  <% } %>
                </td>
                <td class="text-center">
                  <button class="btn btn-success" onclick="showEdit('<%= post.id %>')">
                    <i class="fas fa-edit"></i>
                  </button>
                  <button class="btn btn-danger" onclick="confirmDelete('<%= post.id %>')">
                    <i class="fas fa-trash"></i>
                  </button>
                </td>
              </tr>
            <% }) %>
          </table>
        </div>
      </div>
    </div>
  </div>

  <%- include('../partials/script.ejs'); %>
  <script src="https://cdn.jsdelivr.net/npm/summernote@0.8.18/dist/summernote.min.js"></script>
  <script>
let editId = null;

    // Obtener todos los elementos de formulario del documento
let forms = document.querySelectorAll("form");

// Recorrer cada elemento de formulario
for (let form of forms) {
  // Agregar un evento de submit al formulario
  form.addEventListener("submit", function (event) {
    // Prevenir el comportamiento por defecto de enviar el formulario
    event.preventDefault();

    // Obtener la URL del action del formulario
    let action = form.getAttribute("action");

    // Obtener los datos del formulario como un objeto FormData
    let formData = new FormData(form);

    const method = editId ? "PUT" : "POST";

    const summernoteElement = $('#summernote');

    if (summernoteElement && summernoteElement.summernote) {
      const summernote = summernoteElement.summernote("code");
      formData.append("content", summernote);
    }

    formData.delete("files");

    if (editId) {
      formData.append("id", editId);

      if ($("#image").val() === "") {
        formData.delete("image");
      }
    }

    fetch(action, {
      method,
      body: formData,
      redirect: "follow",
    })
      .then(async (response) => {
        if (response.ok) {
          const jsonData = await response.json();
          await Swal.fire("Success!", jsonData.message, "success");
          if (jsonData?.redirect) window.location.href = jsonData.redirect;
          else window.location.reload();
        } else {
          // Si hay algún error, mostrar un mensaje
          const error = await response?.json();

          Swal.fire({
            text: error?.message ?? response.statusText,
            icon: "error",
          });
        }
      })
      .catch((error) => {
        // Si hay algún error de red, mostrar un mensaje
        alert("Error de red: " + error);
      });
  });
}

function confirmDelete(id) {
  const title = $(`#${id}-title`).text();
  Swal.fire({
    title: 'Are you sure?',
    text: `Will remove the post: ${title}`,
    icon: 'warning',
    showCancelButton: true,
    confirmButtonColor: '#3085d6',
    cancelButtonColor: '#d33',
    confirmButtonText: 'Yes, delete it!'
  }).then((result) => {
    if (result.isConfirmed) {
      $.ajax({
        url: `posts/${id}`,
        type: 'DELETE',
        success: function(result) {
          Swal.fire(
            'Deleted!',
            'Your post has been deleted.',
            'success'
          )

          setTimeout(function () {
            window.location.reload();
          }, 300);
        },
        error: function (request, status, error) {
          Swal.fire(
            'Failed to delete!',
            request.responseJSON.message,
            'error'
          )
        }
      });
    }
  });
}

function showEdit(id) {
  editId = id;

  $.ajax({
    url: `posts/${id}`,
    type: 'GET',
    success: function(result) {
      const post = result.data;

      $('#title').val(post.title);

      $('#summernote').summernote('code', post.content);

      $('#button_submit').text('Update');
      $('#button_cancel').removeClass('d-none');

      $('#image').prop('required', false);
    }
  });
}

function cancel() {
  editId = null;
  $('#button_submit').text('Submit');
  $('#button_cancel').addClass('d-none');
  $('#image').prop('required', true);

  $('#title').val('');

  $('#summernote').summernote('code', '');
}
  </script>
  <script>
    $(document).ready(function() {
      $('#summernote').summernote();
    });
  </script>
</body>
</html>